---
- name: Setup k8s nodes
  hosts: masters:workers
  become: true
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
    docker_apt_gpg_key: https://download.docker.com/linux/ubuntu/gpg
    docker_apt_repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
  handlers:
    - name: Restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
  tasks:
    - name: Update system packages
      block:
        - name: Update APT package index
          ansible.builtin.apt:
            update_cache: true

        - name: Upgrade all packages to the latest version
          ansible.builtin.apt:
            upgrade: dist
            update_cache: true
            cache_valid_time: 3600  # cache valid for 1 hour to avoid updating the cache if recently updated
            force_apt_get: true  # use apt-get instead of aptitude
          register: upgrade_result
          until: upgrade_result is succeeded
          retries: 5
          delay: 60  # wait 60 seconds before retrying

    - name: Disable swap
      block:
        - name: Turn off swap
          ansible.builtin.command: swapoff -a
          changed_when: false

        - name: Comment swap line from /etc/fstab
          ansible.builtin.lineinfile:
            path: /etc/fstab
            regexp: '^([^#].* swap .*)$'
            line: '#\1'
            backrefs: true

    - name: Setup kernel modules and sysctl parameters
      block:
        - name: Add kernel modules to containerd.conf
          ansible.builtin.copy:
            dest: /etc/modules-load.d/containerd.conf
            content: |
              overlay
              br_netfilter
            owner: root
            group: root
            mode: '0644'

        - name: Load kernel modules
          community.general.modprobe:
            name: "{{ item }}"
          loop:
            - overlay
            - br_netfilter

        - name: Add sysctl parameters
          ansible.builtin.copy:
            dest: /etc/sysctl.d/kubernetes.conf
            content: |
              net.bridge.bridge-nf-call-ip6tables = 1
              net.bridge.bridge-nf-call-iptables = 1
              net.ipv4.ip_forward = 1
            owner: root
            group: root
            mode: '0644'

        - name: Reload sysctl
          ansible.builtin.command: sysctl --system
          changed_when: false

    - name: Setup Docker
      block:
        - name: Install packages
          ansible.builtin.apt:
            pkg:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg2
              - software-properties-common

        - name: Create directory for Docker's GPG key
          ansible.builtin.file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Add Docker's official GPG key
          ansible.builtin.apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            keyring: /etc/apt/keyrings/docker.gpg
            state: present

        - name: Add Docker repository
          ansible.builtin.apt_repository:
            repo: >-
              deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
              signed-by=/etc/apt/keyrings/docker.gpg]
              https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
            filename: docker
            state: present

        - name: Install Docker related packages
          ansible.builtin.apt:
            name: "{{ item }}"
            state: present
            update_cache: true
          loop:
            - docker-ce
            - docker-ce-cli
            - docker-buildx-plugin
            - docker-compose-plugin

        - name: Install Grafana Loki Docker Driver plugin
          community.docker.docker_plugin:
            plugin_name: grafana/loki-docker-driver:latest
            alias: loki
            state: present

        - name: Enable and start Docker services
          ansible.builtin.systemd:
            name: "{{ item }}"
            enabled: true
            state: started
          loop:
            - docker.service
            - containerd.service

    - name: Setup containerd
      block:
        - name: Install containerd
          ansible.builtin.apt:
            name: containerd.io
            state: present
            update_cache: true

        - name: Generate containerd config
          ansible.builtin.shell:
            cmd: containerd config default > /etc/containerd/config.toml
          changed_when: false

        - name: Set SystemdCgroup to true in containerd config
          ansible.builtin.lineinfile:
            path: /etc/containerd/config.toml
            regexp: '^(\s*SystemdCgroup\s*=\s*)false'
            line: '\1true'
            backrefs: true
          notify: Restart containerd

        - name: Enable and start containerd service
          ansible.builtin.systemd:
            name: containerd
            enabled: true
            state: started

    - name: Setup Kubernetes
      block:
        - name: Download Kubernetes official GPG key
          ansible.builtin.get_url:
            url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
            dest: /tmp/kubernetes-release.key
            mode: '0644'

        - name: Dearmor and move Kubernetes GPG key to apt keyrings
          ansible.builtin.command: gpg --dearmor --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
          changed_when: false

        - name: Add Kubernetes APT repository
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
            state: present
            filename: kubernetes.list

        - name: Install kubelet, kubeadm and kubectl
          ansible.builtin.apt:
            name:
              - kubelet
              - kubeadm
              - kubectl
            state: present
            update_cache: true

        - name: Hold kubelet, kubeadm and kubectl at their current versions
          ansible.builtin.apt:
            name: "{{ item }}"
            state: fixed
          loop:
            - kubelet
            - kubeadm
            - kubectl

- name: Configure master node
  hosts: masters
  become: true
  tasks:
    - name: Initialize the Kubernetes cluster
      ansible.builtin.command: kubeadm init --pod-network-cidr=192.168.0.0/16
      register: init_output
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Save entire kubeadm init output to a file
      ansible.builtin.copy:
        dest: /etc/kubeadm_init_output.txt
        content: "{{ init_output.stdout }}"
        owner: root
        group: root
        mode: '0644'

    - name: Save kubeadm join command
      ansible.builtin.copy:
        dest: /etc/kubeadm_join_cmd.sh
        content: |
          {{ init_output.stdout_lines[-2] }}
          {{ init_output.stdout_lines[-1] }}
        owner: root
        group: root
        mode: '0755'

    - name: Read kubeadm join command file
      ansible.builtin.slurp:
        src: /etc/kubeadm_join_cmd.sh
      register: kubeadm_join_cmd_file

    - name: Copy kubeadm join command to local machine
      ansible.builtin.fetch:
        src: /etc/kubeadm_join_cmd.sh
        dest: "./kubeadm_join_cmd.sh"
        flat: true

    - name: Create .kube directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Copy admin.conf to /root/.kube/config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: true
        owner: root
        group: root
        mode: '0644'

- name: Configure worker nodes
  hosts: workers
  become: true
  tasks:
    - name: Copy kubeadm join command to worker nodes
      ansible.builtin.copy:
        src: "./kubeadm_join_cmd.sh"
        dest: "/tmp/kubeadm_join_cmd.sh"
        mode: "0755"

    - name: Execute kubeadm join on worker nodes
      ansible.builtin.command: sh /tmp/kubeadm_join_cmd.sh
      changed_when: false

- name: Install networking tools, plugins and crds
  hosts: masters
  become: true
  tasks:
    - name: Install Traefik custom resource definitions
      ansible.builtin.command: |
        kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v2.11/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
      changed_when: false

    - name: Install the Tigera Calico operator and custom resource definitions
      ansible.builtin.command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/tigera-operator.yaml
      changed_when: false

    - name: Install the Calico custom resource
      ansible.builtin.command: kubectl create -f  https://raw.githubusercontent.com/projectcalico/calico/v3.27.2/manifests/custom-resources.yaml

    - name: Setup calicoctl
      block:
        - name: Download calicoctl
          ansible.builtin.get_url:
            url: https://github.com/projectcalico/calico/releases/download/v3.27.2/calicoctl-linux-amd64
            dest: /usr/local/bin/calicoctl
            mode: '0755'

        - name: Set calicoctl executable
          ansible.builtin.file:
            path: /usr/local/bin/calicoctl
            mode: '0755'
            state: file

    - name: Install DigitalOcean CSI driver for storage blocks
      block:
        - name: Install DigitalOcean CSI driver
          shell: >
            kubectl apply -fhttps://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v4.8.0/{crds.yaml,driver.yaml,snapshot-controller.yaml}
          args:
            executable: /bin/bash
          register: apply_output
          until: apply_output.rc == 0
          retries: 2
          delay: 10

        - name: Reapply the manifests if necessary to ensure CRDs are established
          shell: >
            kubectl apply -fhttps://raw.githubusercontent.com/digitalocean/csi-digitalocean/master/deploy/kubernetes/releases/csi-digitalocean-v4.8.0/{crds.yaml,driver.yaml,snapshot-controller.yaml}
          args:
            executable: /bin/bash
          when: apply_output.rc != 0
