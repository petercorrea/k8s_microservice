version: '3.8'
services:
  # app services
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: pmcorrea/builder:latest
    image: pmcorrea/frontend:${TAG}
    ports:
      - '3000:3000'
    environment:
      - DEV=true
    volumes:
      - ./packages/frontend:/app/packages/frontend
      - /app/packages/frontend/node_modules
    command: npm run dev
    logging:
      driver: loki
      options:
        # for mac
        # loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
        # for linux
        loki-url: 'http://loki:3100/loki/api/v1/push'
        loki-batch-size: '400'
        loki-external-labels: container_name=frontend
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
      interval: 30s
      timeout: 5s
      retries: 3

  auth:
    build:
      context: ./packages/auth
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: pmcorrea/builder:latest
    image: pmcorrea/auth:${TAG}
    ports:
      - '9000:9000'
    environment:
      - DEV=true
    volumes:
      - ./packages/auth:/app/packages/auth
      - /app/packages/auth/node_modules
    command: npm run dev
    logging:
      driver: loki
      options:
        # for mac
        # loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
        # for linux
        loki-url: 'http://loki:3100/loki/api/v1/push'
        loki-batch-size: '400'
        loki-external-labels: container_name=auth
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/']
      interval: 30s
      timeout: 5s
      retries: 3

  hello:
    build:
      context: ./packages/hello-from-pod
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: pmcorrea/builder:latest
    image: pmcorrea/hello-from-pod:${TAG}
    ports:
      - '3000:3000'
    environment:
      - DEV=true
    volumes:
      - ./packages/hello-from-pod:/app/packages/hello-from-pod
      - /app/packages/hello-from-pod/node_modules
    command: npm run dev
    logging:
      driver: loki
      options:
        # for mac
        # loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
        # for linux
        loki-url: 'http://loki:3100/loki/api/v1/push'
        loki-batch-size: '400'
        loki-external-labels: container_name=hello
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
      interval: 30s
      timeout: 5s
      retries: 3

  # logging
  loki:
    image: grafana/loki:latest
    volumes:
      - ./loki:/etc/loki
    ports:
      - '3100:3100'
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - loki
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3100/ready']
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    # can change on different system
    user: '501'
    ports:
      - '3001:3000'
    volumes:
      - grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - loki
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # # presistance
  # mongo:
  #   image: mongo:latest
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: password
  #   ports:
  #     - '27017:27017'
  #   volumes:
  #     - mongo:/data/mongodb
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'mongo', '--eval', "db.runCommand('ping').ok"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=mongo

  # postgres:
  #   image: 'postgres:latest'
  #   ports:
  #     - '5432:5432'
  #   environment:
  #     POSTGRES_DB: postgres
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: password
  #   volumes:
  #     - postgres:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD-SHELL', 'pg_isready -U admin -d postgres']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=postgres

  # roach_1:
  #   image: cockroachdb/cockroach:v23.2.2
  #   hostname: roach_1
  #   ports:
  #     - '26257:26257'
  #     - '8080:8080'
  #   # command: 'start'
  #   command: >
  #     start --advertise-addr=roach_1:26357
  #     --http-addr=roach_1:8080
  #     --listen-addr=roach_1:26357
  #     --sql-addr=roach_1:26257
  #     --insecure
  #     --join=roach_1:26357,roach_2:26357,roach_3:26357
  #   volumes:
  #     - 'roach_1:/cockroach/cockroach-data'
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:8080/health?ready=1']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - roach
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=roach_1

  # roach_2:
  #   image: cockroachdb/cockroach:v23.2.2
  #   hostname: roach_2
  #   ports:
  #     - '26258:26258'
  #     - '8081:8081'
  #   command: >
  #     start
  #     --advertise-addr=roach_2:26357
  #     --http-addr=roach_2:8081
  #     --listen-addr=roach_2:26357
  #     --sql-addr=roach_2:26258
  #     --insecure
  #     --join=roach_2:26357,roach_2:26357,roach_3:26357
  #   volumes:
  #     - 'roach_2:/cockroach/cockroach-data'
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:8081/health?ready=1']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - roach
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=roach_2

  # roach_3:
  #   image: cockroachdb/cockroach:v23.2.2
  #   hostname: roach_3
  #   ports:
  #     - '26259:26259'
  #     - '8082:8082'
  #   command: >
  #     start
  #     --advertise-addr=roach_3:26357
  #     --http-addr=roach_3:8082
  #     --listen-addr=roach_3:26357
  #     --sql-addr=roach_3:26259
  #     --insecure
  #     --join=roach_1:26357,roach_2:26357,roach_3:26357
  #   volumes:
  #     - 'roach_3:/cockroach/cockroach-data'
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:8082/health?ready=1']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - roach
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=roach_3

  # # messagebroker
  # rabbitmq:
  #   image: 'rabbitmq:3-management'
  #   ports:
  #     - '5672:5672' # RabbitMQ server
  #     - '15672:15672' # Management interface
  #   environment:
  #     RABBITMQ_DEFAULT_USER: admin
  #     RABBITMQ_DEFAULT_PASS: password
  #   volumes:
  #     - rabbitmq:/var/lib/rabbitmq
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD-SHELL', 'rabbitmqctl status']
  #     interval: 30s
  #     timeout: 30s
  #     retries: 3
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=rabbitmq

  # # caching
  # redis:
  #   image: 'redis:latest'
  #   ports:
  #     - '6379:6379'
  #   volumes:
  #     - redis:/data/redis
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ['CMD', 'redis-cli', 'ping']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   logging:
  #     driver: loki
  #     options:
  #       # for mac
  #       loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
  #       # for linux
  #       # loki-url: 'http://loki:3100/loki/api/v1/push'
  #       loki-batch-size: '400'
  #       loki-external-labels: container_name=redis

volumes:
  grafana:
    name: grafana
  # mongo:
  #   name: mongo
  # postgres:
  #   name: postgres
  # rabbitmq:
  #   name: rabbitmq
  # redis:
  #   name: redis
  # roach_1:
  #   name: roach_1
  # roach_2:
  #   name: roach_2
  # roach_3:
  #   name: roach_3

networks:
  loki:
  # roach:
# test
