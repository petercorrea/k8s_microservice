version: '3.8'
services:
  # app services
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: lerna-base:latest
    ports:
      - '3000:3000'
    environment:
      - DEV=true
    volumes:
      - ./packages/frontend:/app/packages/frontend
      - /app/packages/frontend/node_modules
    command: npm run dev
    logging:
      driver: loki
      options:
        # for mac
        loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
        # for linux
        # loki-url: 'http://loki:3100/loki/api/v1/push'
        loki-batch-size: '400'
        loki-external-labels: container_name=frontend
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
      interval: 30s
      timeout: 5s
      retries: 3

  auth:
    build:
      context: ./packages/auth
      dockerfile: Dockerfile
      args:
        BASE_IMAGE: lerna-base:latest
    ports:
      - '9000:9000'
    environment:
      - DEV=true
    volumes:
      - ./packages/auth:/app/packages/auth
      - /app/packages/auth/node_modules
    command: npm run dev
    logging:
      driver: loki
      options:
        # for mac
        loki-url: 'http://host.docker.internal:3100/loki/api/v1/push'
        # for linux
        # loki-url: 'http://loki:3100/loki/api/v1/push'
        loki-batch-size: '400'
        loki-external-labels: container_name=auth
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/']
      interval: 30s
      timeout: 5s
      retries: 3

  # logging
  loki:
    image: grafana/loki:latest
    volumes:
      - ./loki:/etc/loki
    ports:
      - '3100:3100'
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - loki
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3100/ready']
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    # can change on different system
    user: '501'
    ports:
      - '3001:3000'
    volumes:
      - ./grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - loki
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # presistance
  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/mongodb
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    image: 'postgres:latest'
    ports:
      - '5432:5432'
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U admin -d postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # messagebroker
  rabbitmq:
    image: 'rabbitmq:3-management'
    ports:
      - '5672:5672' # RabbitMQ server
      - '15672:15672' # Management interface
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'rabbitmqctl status']
      interval: 30s
      timeout: 30s
      retries: 3

  # caching
  redis:
    image: 'redis:latest'
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data/redis
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  mongodb_data:
    name: mongodb_data
  postgres_data:
    name: postgres_data
  rabbitmq_data:
    name: rabbitmq_data
  redis_data:
    name: redis_data

networks:
  loki:
